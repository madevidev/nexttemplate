import { AnyType, Args, GarphSchema } from './index';
import { SchemaComposer } from 'graphql-compose';
export type ConverterConfig = {
    defaultNullability?: boolean;
};
export declare function printSchema(g: GarphSchema, config?: ConverterConfig): string;
export declare function buildSchema({ g, resolvers }: {
    g: GarphSchema;
    resolvers?: any;
}, config?: ConverterConfig): import("graphql").GraphQLSchema;
export declare function getFieldType(schemaComposer: SchemaComposer, type: AnyType, config: ConverterConfig): any;
export declare function convertToGraphqlType(schemaComposer: SchemaComposer, name: string, type: AnyType, config: ConverterConfig, resolvers?: any): import("graphql-compose").ObjectTypeComposer<any, any> | import("graphql-compose").InputTypeComposer<any> | import("graphql-compose").EnumTypeComposer<any> | import("graphql-compose").InterfaceTypeComposer<any, any> | import("graphql-compose").UnionTypeComposer<any, any> | import("graphql-compose").ScalarTypeComposer<any>;
export declare function parseFields(schemaComposer: SchemaComposer, name: string, fields: AnyType, config: ConverterConfig, resolvers?: any): {};
export declare function parseArgs(schemaComposer: SchemaComposer, anyArgs: Args, config: any): {};
